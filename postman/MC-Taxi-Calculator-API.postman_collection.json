{
  "info": {
    "name": "MC Taxi Calculator API",
    "description": "Complete API collection for the MC Taxi Calculator application with all current endpoints",
    "version": "2.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3001",
      "type": "string"
    },
    {
      "key": "apiUrl",
      "value": "{{baseUrl}}/api",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health & Status",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{apiUrl}}/health",
              "host": ["{{apiUrl}}"],
              "path": ["health"]
            },
            "description": "Check API health status"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success field', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "});",
                  "",
                  "pm.test('Response time is less than 1000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "API Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            },
            "description": "Get API information and available endpoints"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Fare Calculation",
      "item": [
        {
          "name": "Calculate Fare (Main Endpoint)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"distance\": 10.5,\n  \"vehicleType\": \"motorcycle\",\n  \"clientId\": \"{{testClientId}}\"\n}"
            },
            "url": {
              "raw": "{{apiUrl}}/calculate-fare",
              "host": ["{{apiUrl}}"],
              "path": ["calculate-fare"]
            },
            "description": "Calculate fare using the main fare calculation endpoint with Philippine taxi fare structure"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success field', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "});",
                  "",
                  "pm.test('Response has data with calculationId', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('calculationId');",
                  "    pm.expect(jsonData.data).to.have.property('totalFare');",
                  "    pm.expect(jsonData.data).to.have.property('distance');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Calculate Fare (Alternative Endpoint)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"vehicleType\": \"motorcycle\",\n  \"distance\": 15.2\n}"
            },
            "url": {
              "raw": "{{apiUrl}}/fare-config/calculate",
              "host": ["{{apiUrl}}"],
              "path": ["fare-config", "calculate"]
            },
            "description": "Calculate fare using the fare-config endpoint"
          },
          "response": []
        },
        {
          "name": "Get Fare History",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{apiUrl}}/fare-history",
              "host": ["{{apiUrl}}"],
              "path": ["fare-history"]
            },
            "description": "Retrieve fare calculation history"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Fare Configuration Management",
      "item": [
        {
          "name": "Get All Fare Configs",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{apiUrl}}/fare-config/configs",
              "host": ["{{apiUrl}}"],
              "path": ["fare-config", "configs"]
            },
            "description": "Get all fare configurations"
          },
          "response": []
        },
        {
          "name": "Get Fare Config by Vehicle Type",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{apiUrl}}/fare-config/configs/motorcycle",
              "host": ["{{apiUrl}}"],
              "path": ["fare-config", "configs", "motorcycle"]
            },
            "description": "Get fare configuration for a specific vehicle type"
          },
          "response": []
        },
        {
          "name": "Create New Fare Config",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"vehicle_type\": \"car\",\n  \"min_distance\": 0,\n  \"max_distance\": 10,\n  \"base_price\": 40,\n  \"price_per_km\": 13.5\n}"
            },
            "url": {
              "raw": "{{apiUrl}}/fare-config/configs",
              "host": ["{{apiUrl}}"],
              "path": ["fare-config", "configs"]
            },
            "description": "Create a new fare configuration"
          },
          "response": []
        },
        {
          "name": "Update Fare Config",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"base_price\": 45,\n  \"price_per_km\": 14.0\n}"
            },
            "url": {
              "raw": "{{apiUrl}}/fare-config/configs/1",
              "host": ["{{apiUrl}}"],
              "path": ["fare-config", "configs", "1"]
            },
            "description": "Update an existing fare configuration"
          },
          "response": []
        },
        {
          "name": "Delete Fare Config",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{apiUrl}}/fare-config/configs/1",
              "host": ["{{apiUrl}}"],
              "path": ["fare-config", "configs", "1"]
            },
            "description": "Delete a fare configuration (soft delete)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Vehicle Management",
      "item": [
        {
          "name": "Get Vehicle Types",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{apiUrl}}/fare-config/vehicles",
              "host": ["{{apiUrl}}"],
              "path": ["fare-config", "vehicles"]
            },
            "description": "Get all available vehicle types"
          },
          "response": []
        },
        {
          "name": "Create Vehicle Type",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"tricycle\",\n  \"display_name\": \"Tricycle\",\n  \"icon\": \"bike\"\n}"
            },
            "url": {
              "raw": "{{apiUrl}}/fare-config/vehicles",
              "host": ["{{apiUrl}}"],
              "path": ["fare-config", "vehicles"]
            },
            "description": "Create a new vehicle type"
          },
          "response": []
        },
        {
          "name": "Delete Vehicle Type",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{apiUrl}}/fare-config/vehicles/1",
              "host": ["{{apiUrl}}"],
              "path": ["fare-config", "vehicles", "1"]
            },
            "description": "Delete a vehicle type (soft delete). Note: Cannot delete if there are active fare configurations using this vehicle type."
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success field', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "});",
                  "",
                  "pm.test('Response has data with deleted vehicle', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('name');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Metrics & Monitoring",
      "item": [
        {
          "name": "Get Custom Metrics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{apiUrl}}/metrics",
              "host": ["{{apiUrl}}"],
              "path": ["metrics"]
            },
            "description": "Get custom application metrics"
          },
          "response": []
        },
        {
          "name": "Get Prometheus Metrics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/metrics",
              "host": ["{{baseUrl}}"],
              "path": ["metrics"]
            },
            "description": "Get Prometheus-formatted metrics"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Error Testing",
      "item": [
        {
          "name": "Invalid Fare Calculation - Missing Distance",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"vehicleType\": \"motorcycle\",\n  \"clientId\": \"{{testClientId}}\"\n}"
            },
            "url": {
              "raw": "{{apiUrl}}/calculate-fare",
              "host": ["{{apiUrl}}"],
              "path": ["calculate-fare"]
            },
            "description": "Test error handling for missing distance parameter"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has error message', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', false);",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Invalid Fare Calculation - Negative Distance",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"distance\": -5,\n  \"vehicleType\": \"motorcycle\",\n  \"clientId\": \"{{testClientId}}\"\n}"
            },
            "url": {
              "raw": "{{apiUrl}}/calculate-fare",
              "host": ["{{apiUrl}}"],
              "path": ["calculate-fare"]
            },
            "description": "Test error handling for negative distance"
          },
          "response": []
        },
        {
          "name": "Invalid Fare Calculation - Zero Distance",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"distance\": 0,\n  \"vehicleType\": \"motorcycle\",\n  \"clientId\": \"{{testClientId}}\"\n}"
            },
            "url": {
              "raw": "{{apiUrl}}/calculate-fare",
              "host": ["{{apiUrl}}"],
              "path": ["calculate-fare"]
            },
            "description": "Test error handling for zero distance"
          },
          "response": []
        },
        {
          "name": "Invalid Fare Config - Missing Fields",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"vehicle_type\": \"car\"\n}"
            },
            "url": {
              "raw": "{{apiUrl}}/fare-config/configs",
              "host": ["{{apiUrl}}"],
              "path": ["fare-config", "configs"]
            },
            "description": "Test error handling for missing required fields in fare config"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Rate Limiting Tests",
      "item": [
        {
          "name": "Rate Limit Test - Multiple Requests",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"distance\": 5,\n  \"vehicleType\": \"motorcycle\",\n  \"clientId\": \"rate-limit-test\"\n}"
            },
            "url": {
              "raw": "{{apiUrl}}/calculate-fare",
              "host": ["{{apiUrl}}"],
              "path": ["calculate-fare"]
            },
            "description": "Test rate limiting by making multiple requests (run this multiple times to test rate limiting)"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set timestamp for unique client IDs",
          "pm.globals.set('timestamp', Date.now());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test for all requests",
          "pm.test('Response time is reasonable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Content-Type is JSON', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});"
        ]
      }
    }
  ]
}

