[1mdiff --git a/.gitignore b/.gitignore[m
[1mindex 5ef6a52..4e50592 100644[m
[1m--- a/.gitignore[m
[1m+++ b/.gitignore[m
[36m@@ -38,4 +38,3 @@[m [myarn-error.log*[m
 [m
 # typescript[m
 *.tsbuildinfo[m
[31m-next-env.d.ts[m
[1mdiff --git a/GRAFANA_README.md b/GRAFANA_README.md[m
[1mnew file mode 100644[m
[1mindex 0000000..ddeeb8e[m
[1m--- /dev/null[m
[1m+++ b/GRAFANA_README.md[m
[36m@@ -0,0 +1,214 @@[m
[32m+[m[32m# üìä MC Taxi API - Grafana Monitoring[m
[32m+[m
[32m+[m[32mThis guide will help you set up comprehensive monitoring for your MC Taxi API using Grafana, Prometheus, and related tools.[m
[32m+[m
[32m+[m[32m## üéØ What's Included[m
[32m+[m
[32m+[m[32m- **Grafana**: Beautiful dashboards and visualizations[m
[32m+[m[32m- **Prometheus**: Metrics collection and storage[m
[32m+[m[32m- **Node Exporter**: System metrics (CPU, memory, disk)[m
[32m+[m[32m- **cAdvisor**: Container metrics[m
[32m+[m[32m- **Custom Metrics**: API-specific metrics for fare calculations[m
[32m+[m
[32m+[m[32m## üöÄ Quick Start[m
[32m+[m
[32m+[m[32m### Prerequisites[m
[32m+[m[32m- Docker and Docker Compose installed[m
[32m+[m[32m- Node.js and npm[m
[32m+[m[32m- Your MC Taxi API running[m
[32m+[m
[32m+[m[32m### Setup Steps[m
[32m+[m
[32m+[m[32m1. **Install Dependencies**[m
[32m+[m[32m   ```bash[m
[32m+[m[32m   npm install prom-client[m
[32m+[m[32m   ```[m
[32m+[m
[32m+[m[32m2. **Run Setup Script**[m
[32m+[m[32m   ```bash[m
[32m+[m[32m   chmod +x setup-grafana.sh[m
[32m+[m[32m   ./setup-grafana.sh[m
[32m+[m[32m   ```[m
[32m+[m
[32m+[m[32m3. **Or Manual Setup**[m
[32m+[m[32m   ```bash[m
[32m+[m[32m   # Create directories[m
[32m+[m[32m   mkdir -p monitoring/grafana/provisioning/datasources[m
[32m+[m[32m   mkdir -p monitoring/grafana/provisioning/dashboards[m
[32m+[m[32m   mkdir -p monitoring/grafana/dashboards[m
[32m+[m[41m   [m
[32m+[m[32m   # Start monitoring stack[m
[32m+[m[32m   docker-compose -f docker-compose.grafana.yml up -d[m
[32m+[m[32m   ```[m
[32m+[m
[32m+[m[32m## üìä Access URLs[m
[32m+[m
[32m+[m[32m| Service | URL | Credentials |[m
[32m+[m[32m|---------|-----|-------------|[m
[32m+[m[32m| **Grafana** | http://localhost:3000 | admin/admin123 |[m
[32m+[m[32m| **Prometheus** | http://localhost:9090 | - |[m
[32m+[m[32m| **Node Exporter** | http://localhost:9100 | - |[m
[32m+[m[32m| **cAdvisor** | http://localhost:8080 | - |[m
[32m+[m
[32m+[m[32m## üìà Dashboard Features[m
[32m+[m
[32m+[m[32m### MC Taxi API Dashboard[m
[32m+[m[32m- **Total API Requests**: Count of all API calls[m
[32m+[m[32m- **Total Fare Calculations**: Number of fare calculations[m
[32m+[m[32m- **Average Fare**: Average fare amount in PHP[m
[32m+[m[32m- **Vehicle Type Distribution**: Pie chart of vehicle types used[m
[32m+[m[32m- **API Response Time**: Response time trends[m
[32m+[m[32m- **Requests per Minute**: API throughput[m
[32m+[m[32m- **System CPU Usage**: Server CPU utilization[m
[32m+[m[32m- **System Memory Usage**: Server memory utilization[m
[32m+[m
[32m+[m[32m### Custom Metrics[m
[32m+[m[32m- `mc_taxi_total_requests`: Total HTTP requests[m
[32m+[m[32m- `mc_taxi_total_calculations`: Total fare calculations[m
[32m+[m[32m- `mc_taxi_average_fare`: Average fare amount[m
[32m+[m[32m- `mc_taxi_vehicle_type_count`: Vehicle type usage[m
[32m+[m[32m- `mc_taxi_request_duration_seconds`: API response times[m
[32m+[m
[32m+[m[32m## üîß Configuration[m
[32m+[m
[32m+[m[32m### Prometheus Configuration[m
[32m+[m[32mLocated at `monitoring/prometheus.yml`:[m
[32m+[m[32m- Scrapes metrics from your API at `/metrics`[m
[32m+[m[32m- Collects system metrics from Node Exporter[m
[32m+[m[32m- Collects container metrics from cAdvisor[m
[32m+[m
[32m+[m[32m### Grafana Configuration[m
[32m+[m[32m- **Datasources**: Automatically configured to use Prometheus[m
[32m+[m[32m- **Dashboards**: Pre-configured MC Taxi dashboard[m
[32m+[m[32m- **Provisioning**: Automatic setup on startup[m
[32m+[m
[32m+[m[32m## üê≥ Docker Services[m
[32m+[m
[32m+[m[32m### Prometheus[m
[32m+[m[32m- **Port**: 9090[m
[32m+[m[32m- **Purpose**: Metrics collection and storage[m
[32m+[m[32m- **Data Retention**: 200 hours[m
[32m+[m
[32m+[m[32m### Grafana[m
[32m+[m[32m- **Port**: 3000[m
[32m+[m[32m- **Purpose**: Dashboard visualization[m
[32m+[m[32m- **Default User**: admin/admin123[m
[32m+[m
[32m+[m[32m### Node Exporter[m
[32m+[m[32m- **Port**: 9100[m
[32m+[m[32m- **Purpose**: System metrics collection[m
[32m+[m
[32m+[m[32m### cAdvisor[m
[32m+[m[32m- **Port**: 8080[m
[32m+[m[32m- **Purpose**: Container metrics collection[m
[32m+[m
[32m+[m[32m## üìä Using the Dashboard[m
[32m+[m
[32m+[m[32m1. **Login to Grafana**[m
[32m+[m[32m   - URL: http://localhost:3000[m
[32m+[m[32m   - Username: admin[m
[32m+[m[32m   - Password: admin123[m
[32m+[m
[32m+[m[32m2. **View MC Taxi Dashboard**[m
[32m+[m[32m   - Should be automatically loaded[m
[32m+[m[32m   - Or navigate to Dashboards ‚Üí MC Taxi API Dashboard[m
[32m+[m
[32m+[m[32m3. **Generate Metrics**[m
[32m+[m[32m   - Make API calls to your backend[m
[32m+[m[32m   - Watch metrics update in real-time[m
[32m+[m
[32m+[m[32m## üîç Troubleshooting[m
[32m+[m
[32m+[m[32m### Services Not Starting[m
[32m+[m[32m```bash[m
[32m+[m[32m# Check service status[m
[32m+[m[32mdocker-compose -f docker-compose.grafana.yml ps[m
[32m+[m
[32m+[m[32m# View logs[m
[32m+[m[32mdocker-compose -f docker-compose.grafana.yml logs[m
[32m+[m
[32m+[m[32m# Restart services[m
[32m+[m[32mdocker-compose -f docker-compose.grafana.yml restart[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m### No Metrics Showing[m
[32m+[m[32m1. **Check Prometheus Targets**[m
[32m+[m[32m   - Go to http://localhost:9090/targets[m
[32m+[m[32m   - Ensure all targets are "UP"[m
[32m+[m
[32m+[m[32m2. **Check API Metrics Endpoint**[m
[32m+[m[32m   - Visit http://your-api-url:3001/metrics[m
[32m+[m[32m   - Should return Prometheus metrics[m
[32m+[m
[32m+[m[32m3. **Verify Network Connectivity**[m
[32m+[m[32m   - Ensure Prometheus can reach your API[m
[32m+[m[32m   - Check firewall settings[m
[32m+[m
[32m+[m[32m### Dashboard Not Loading[m
[32m+[m[32m1. **Check Grafana Logs**[m
[32m+[m[32m   ```bash[m
[32m+[m[32m   docker-compose -f docker-compose.grafana.yml logs grafana[m
[32m+[m[32m   ```[m
[32m+[m
[32m+[m[32m2. **Verify Datasource**[m
[32m+[m[32m   - Go to Configuration ‚Üí Data Sources[m
[32m+[m[32m   - Ensure Prometheus is connected[m
[32m+[m
[32m+[m[32m3. **Check Dashboard Provisioning**[m
[32m+[m[32m   - Verify dashboard files are in correct location[m
[32m+[m[32m   - Check file permissions[m
[32m+[m
[32m+[m[32m## üõ†Ô∏è Customization[m
[32m+[m
[32m+[m[32m### Adding New Metrics[m
[32m+[m[32m1. **Update `middleware/metrics.js`**[m
[32m+[m[32m   - Add new Prometheus metrics[m
[32m+[m[32m   - Register them with the registry[m
[32m+[m
[32m+[m[32m2. **Update Dashboard**[m
[32m+[m[32m   - Add new panels to `monitoring/grafana/dashboards/mc-taxi-dashboard.json`[m
[32m+[m[32m   - Use PromQL queries to display data[m
[32m+[m
[32m+[m[32m### Modifying Dashboard[m
[32m+[m[32m1. **Edit Dashboard JSON**[m
[32m+[m[32m   - Modify `monitoring/grafana/dashboards/mc-taxi-dashboard.json`[m
[32m+[m[32m   - Restart Grafana to apply changes[m
[32m+[m
[32m+[m[32m2. **Use Grafana UI**[m
[32m+[m[32m   - Make changes in Grafana interface[m
[32m+[m[32m   - Export updated dashboard JSON[m
[32m+[m
[32m+[m[32m## üìö Useful PromQL Queries[m
[32m+[m
[32m+[m[32m```promql[m
[32m+[m[32m# Total requests per minute[m
[32m+[m[32mrate(mc_taxi_total_requests[1m]) * 60[m
[32m+[m
[32m+[m[32m# Average response time[m
[32m+[m[32mrate(mc_taxi_request_duration_seconds_sum[5m]) / rate(mc_taxi_request_duration_seconds_count[5m])[m
[32m+[m
[32m+[m[32m# Vehicle type distribution[m
[32m+[m[32mmc_taxi_vehicle_type_count[m
[32m+[m
[32m+[m[32m# Error rate[m
[32m+[m[32mrate(mc_taxi_total_calculations{status="error"}[5m])[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m## üîí Security Considerations[m
[32m+[m
[32m+[m[32m- **Change Default Passwords**: Update Grafana admin password[m
[32m+[m[32m- **Network Security**: Restrict access to monitoring ports[m
[32m+[m[32m- **Data Retention**: Configure appropriate retention periods[m
[32m+[m[32m- **Access Control**: Set up proper user roles and permissions[m
[32m+[m
[32m+[m[32m## üìû Support[m
[32m+[m
[32m+[m[32mIf you encounter issues:[m
[32m+[m[32m1. Check the troubleshooting section above[m
[32m+[m[32m2. Review Docker logs for error messages[m
[32m+[m[32m3. Verify all services are running and accessible[m
[32m+[m[32m4. Ensure your API is generating metrics correctly[m
[32m+[m
[32m+[m[32m---[m
[32m+[m
[32m+[m[32m**Happy Monitoring! üìäüöÄ**[m
[1mdiff --git a/app/globals.css b/app/globals.css[m
[1mindex a2dc41e..665f859 100644[m
[1m--- a/app/globals.css[m
[1m+++ b/app/globals.css[m
[36m@@ -1,17 +1,12 @@[m
[31m-@import "tailwindcss";[m
[32m+[m[32m@tailwind base;[m
[32m+[m[32m@tailwind components;[m
[32m+[m[32m@tailwind utilities;[m
 [m
 :root {[m
   --background: #ffffff;[m
   --foreground: #171717;[m
 }[m
 [m
[31m-@theme inline {[m
[31m-  --color-background: var(--background);[m
[31m-  --color-foreground: var(--foreground);[m
[31m-  --font-sans: var(--font-geist-sans);[m
[31m-  --font-mono: var(--font-geist-mono);[m
[31m-}[m
[31m-[m
 @media (prefers-color-scheme: dark) {[m
   :root {[m
     --background: #0a0a0a;[m
[36m@@ -22,5 +17,4 @@[m
 body {[m
   background: var(--background);[m
   color: var(--foreground);[m
[31m-  font-family: Arial, Helvetica, sans-serif;[m
 }[m
[1mdiff --git a/app/layout.tsx b/app/layout.tsx[m
[1mindex f7fa87e..1299c5e 100644[m
[1m--- a/app/layout.tsx[m
[1m+++ b/app/layout.tsx[m
[36m@@ -1,20 +1,20 @@[m
 import type { Metadata } from "next";[m
[31m-import { Geist, Geist_Mono } from "next/font/google";[m
[32m+[m[32mimport { Inter, Roboto_Mono } from "next/font/google";[m
 import "./globals.css";[m
 [m
[31m-const geistSans = Geist({[m
[31m-  variable: "--font-geist-sans",[m
[32m+[m[32mconst inter = Inter({[m
[32m+[m[32m  variable: "--font-inter",[m
   subsets: ["latin"],[m
 });[m
 [m
[31m-const geistMono = Geist_Mono({[m
[31m-  variable: "--font-geist-mono",[m
[32m+[m[32mconst robotoMono = Roboto_Mono({[m
[32m+[m[32m  variable: "--font-roboto-mono",[m
   subsets: ["latin"],[m
 });[m
 [m
 export const metadata: Metadata = {[m
[31m-  title: "Create Next App",[m
[31m-  description: "Generated by create next app",[m
[32m+[m[32m  title: "MC Taxi Fare Calculator",[m
[32m+[m[32m  description: "Calculate taxi fares for motorcycle and car rides",[m
 };[m
 [m
 export default function RootLayout({[m
[36m@@ -25,7 +25,7 @@[m [mexport default function RootLayout({[m
   return ([m
     <html lang="en">[m
       <body[m
[31m-        className={`${geistSans.variable} ${geistMono.variable} antialiased`}[m
[32m+[m[32m        className={`${inter.variable} ${robotoMono.variable} antialiased`}[m
       >[m
         {children}[m
       </body>[m
[1mdiff --git a/app/page.tsx b/app/page.tsx[m
[1mindex 27d4d6b..0b359df 100644[m
[1m--- a/app/page.tsx[m
[1m+++ b/app/page.tsx[m
[36m@@ -11,7 +11,13 @@[m [mexport default function TaxiFareCalculator() {[m
   const [loading, setLoading] = useState(false);[m
 [m
   // Use EC2 backend URL - replace with your actual EC2 public IP[m
[31m-  const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://13.239.158.3:3001';[m
[32m+[m[32m  const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://3.107.78.253:3001';[m
[32m+[m[41m  [m
[32m+[m[32m  // Ensure API_URL is always an absolute URL[m
[32m+[m[32m  const getApiUrl = (endpoint: string) => {[m
[32m+[m[32m    const baseUrl = API_URL.startsWith('http') ? API_URL : `http://${API_URL}`;[m
[32m+[m[32m    return `${baseUrl}${endpoint.startsWith('/') ? endpoint : `/${endpoint}`}`;[m
[32m+[m[32m  };[m[41m [m
 [m
   const handleCalculate = async () => {[m
     setError('');[m
[36m@@ -39,33 +45,40 @@[m [mexport default function TaxiFareCalculator() {[m
       return;[m
     }[m
 [m
[31m-    try {[m
[31m-      const response = await fetch(`${API_URL}/api/calculate-fare`, {[m
[31m-        method: 'POST',[m
[31m-        headers: {[m
[31m-          'Content-Type': 'application/json',[m
[31m-        },[m
[31m-        body: JSON.stringify({[m
[31m-          distance: distanceValue,[m
[31m-          vehicleType: vehicleType,[m
[31m-          clientId: 'web-user'[m
[31m-        }),[m
[31m-      });[m
[31m-[m
[31m-      const data = await response.json();[m
[31m-[m
[31m-      if (data.success) {[m
[31m-        setFare(data.data.totalFare);[m
[31m-        setBreakdown(data.data.breakdown);[m
[31m-      } else {[m
[31m-        setError(data.message || 'Failed to calculate fare. Please try again.');[m
[31m-      }[m
[31m-    } catch (err) {[m
[31m-      console.error('API Error:', err);[m
[31m-      setError('Failed to connect to the server. Please check your connection and try again.');[m
[31m-    } finally {[m
[31m-      setLoading(false);[m
[31m-    }[m
[32m+[m[32m         try {[m
[32m+[m[32m       const apiUrl = getApiUrl('/api/calculate-fare');[m
[32m+[m[32m       console.log('Making request to:', apiUrl);[m
[32m+[m[32m       const response = await fetch(apiUrl, {[m
[32m+[m[32m         method: 'POST',[m
[32m+[m[32m         headers: {[m
[32m+[m[32m           'Content-Type': 'application/json',[m
[32m+[m[32m         },[m
[32m+[m[32m         body: JSON.stringify({[m
[32m+[m[32m           distance: distanceValue,[m
[32m+[m[32m           vehicleType: vehicleType,[m
[32m+[m[32m           clientId: 'web-user'[m
[32m+[m[32m         }),[m
[32m+[m[32m       });[m
[32m+[m
[32m+[m[32m       console.log('Response status:', response.status);[m
[32m+[m[32m       console.log('Response headers:', response.headers);[m
[32m+[m
[32m+[m[32m       const data = await response.json();[m
[32m+[m[32m       console.log('Response data:', data);[m
[32m+[m
[32m+[m[32m       if (data.success) {[m
[32m+[m[32m         setFare(data.data.totalFare);[m
[32m+[m[32m         setBreakdown(data.data.breakdown);[m
[32m+[m[32m       } else {[m
[32m+[m[32m         setError(data.message || 'Failed to calculate fare. Please try again.');[m
[32m+[m[32m       }[m
[32m+[m[32m     } catch (err) {[m
[32m+[m[32m       console.error('API Error:', err);[m
[32m+[m[32m       const errorMessage = err instanceof Error ? err.message : 'Unknown error';[m
[32m+[m[32m       setError(`Failed to connect to the server: ${errorMessage}. URL: ${getApiUrl('/api/calculate-fare')}`);[m
[32m+[m[32m     } finally {[m
[32m+[m[32m       setLoading(false);[m
[32m+[m[32m     }[m
   };[m
 [m
   const handleReset = () => {[m
[1mdiff --git a/controllers/fareController.js b/controllers/fareController.js[m
[1mindex 52cd0ae..de5a0d8 100644[m
[1m--- a/controllers/fareController.js[m
[1m+++ b/controllers/fareController.js[m
[36m@@ -1,5 +1,6 @@[m
 const FareCalculation = require('../models/FareCalculation');[m
 const AppMetrics = require('../models/AppMetrics');[m
[32m+[m[32mconst { recordFareCalculation } = require('../middleware/metrics');[m
 [m
 const fareController = {[m
   // Calculate fare based on distance using Philippine taxi fare structure[m
[36m@@ -32,10 +33,13 @@[m [mconst fareController = {[m
         }[m
       });[m
 [m
[31m-      await calculation.save();[m
[32m+[m[32m              await calculation.save();[m
 [m
[31m-      // Update metrics[m
[31m-      await updateMetrics(vehicleType, totalFare);[m
[32m+[m[32m        // Update metrics[m
[32m+[m[32m        await updateMetrics(vehicleType, totalFare);[m
[32m+[m[41m        [m
[32m+[m[32m        // Record Prometheus metrics[m
[32m+[m[32m        recordFareCalculation(vehicleType, totalFare, true);[m
 [m
       res.status(200).json({[m
         success: true,[m
[1mdiff --git a/docker-compose.grafana.yml b/docker-compose.grafana.yml[m
[1mnew file mode 100644[m
[1mindex 0000000..1a383c6[m
[1m--- /dev/null[m
[1m+++ b/docker-compose.grafana.yml[m
[36m@@ -0,0 +1,84 @@[m
[32m+[m[32mversion: '3.8'[m
[32m+[m
[32m+[m[32mservices:[m
[32m+[m[32m  # Prometheus - Metrics collection[m
[32m+[m[32m  prometheus:[m
[32m+[m[32m    image: prom/prometheus:latest[m
[32m+[m[32m    container_name: mc-taxi-prometheus[m
[32m+[m[32m    ports:[m
[32m+[m[32m      - "9090:9090"[m
[32m+[m[32m    volumes:[m
[32m+[m[32m      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml[m
[32m+[m[32m      - prometheus_data:/prometheus[m
[32m+[m[32m    command:[m
[32m+[m[32m      - '--config.file=/etc/prometheus/prometheus.yml'[m
[32m+[m[32m      - '--storage.tsdb.path=/prometheus'[m
[32m+[m[32m      - '--web.console.libraries=/etc/prometheus/console_libraries'[m
[32m+[m[32m      - '--web.console.templates=/etc/prometheus/consoles'[m
[32m+[m[32m      - '--storage.tsdb.retention.time=200h'[m
[32m+[m[32m      - '--web.enable-lifecycle'[m
[32m+[m[32m    restart: unless-stopped[m
[32m+[m[32m    networks:[m
[32m+[m[32m      - monitoring[m
[32m+[m
[32m+[m[32m  # Grafana - Visualization[m
[32m+[m[32m  grafana:[m
[32m+[m[32m    image: grafana/grafana:latest[m
[32m+[m[32m    container_name: mc-taxi-grafana[m
[32m+[m[32m    ports:[m
[32m+[m[32m      - "3000:3000"[m
[32m+[m[32m    environment:[m
[32m+[m[32m      - GF_SECURITY_ADMIN_USER=admin[m
[32m+[m[32m      - GF_SECURITY_ADMIN_PASSWORD=admin123[m
[32m+[m[32m      - GF_USERS_ALLOW_SIGN_UP=false[m
[32m+[m[32m    volumes:[m
[32m+[m[32m      - grafana_data:/var/lib/grafana[m
[32m+[m[32m      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning[m
[32m+[m[32m      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards[m
[32m+[m[32m    restart: unless-stopped[m
[32m+[m[32m    networks:[m
[32m+[m[32m      - monitoring[m
[32m+[m[32m    depends_on:[m
[32m+[m[32m      - prometheus[m
[32m+[m
[32m+[m[32m  # Node Exporter - System metrics[m
[32m+[m[32m  node-exporter:[m
[32m+[m[32m    image: prom/node-exporter:latest[m
[32m+[m[32m    container_name: mc-taxi-node-exporter[m
[32m+[m[32m    ports:[m
[32m+[m[32m      - "9100:9100"[m
[32m+[m[32m    volumes:[m
[32m+[m[32m      - /proc:/host/proc:ro[m
[32m+[m[32m      - /sys:/host/sys:ro[m
[32m+[m[32m      - /:/rootfs:ro[m
[32m+[m[32m    command:[m
[32m+[m[32m      - '--path.procfs=/host/proc'[m
[32m+[m[32m      - '--path.sysfs=/host/sys'[m
[32m+[m[32m      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'[m
[32m+[m[32m    restart: unless-stopped[m
[32m+[m[32m    networks:[m
[32m+[m[32m      - monitoring[m
[32m+[m
[32m+[m[32m  # cAdvisor - Container metrics[m
[32m+[m[32m  cadvisor:[m
[32m+[m[32m    image: gcr.io/cadvisor/cadvisor:latest[m
[32m+[m[32m    container_name: mc-taxi-cadvisor[m
[32m+[m[32m    ports:[m
[32m+[m[32m      - "8080:8080"[m
[32m+[m[32m    volumes:[m
[32m+[m[32m      - /:/rootfs:ro[m
[32m+[m[32m      - /var/run:/var/run:ro[m
[32m+[m[32m      - /sys:/sys:ro[m
[32m+[m[32m      - /var/lib/docker/:/var/lib/docker:ro[m
[32m+[m[32m      - /dev/disk/:/dev/disk:ro[m
[32m+[m[32m    restart: unless-stopped[m
[32m+[m[32m    networks:[m
[32m+[m[32m      - monitoring[m
[32m+[m
[32m+[m[32mvolumes:[m
[32m+[m[32m  prometheus_data:[m
[32m+[m[32m  grafana_data:[m
[32m+[m
[32m+[m[32mn